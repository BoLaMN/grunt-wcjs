fs       = require 'fs-extra'
path     = require 'path'
os       = require 'os'
GitHub   = require 'github-releases'

{ downloadAndUnzip
  copyDirectory
  dirExistsSync } = require '../utils'

copyFile = (source, target, cb) ->
  cbCalled = false
  rd = fs.createReadStream(source)

  done = (err) ->
    if !cbCalled
      cb err
      cbCalled = true
    return

  rd.on 'error', (err) ->
    done err
    return

  wr = fs.createWriteStream(target)
  
  wr.on 'error', (err) ->
    done err
    return
  
  wr.on 'close', (ex) ->
    done()
    return

  rd.pipe wr
  return

# ---
# generated by js2coffee 2.1.0

fileExistsSync = (filePath) ->
  try
    return fs.statSync(filePath).isFile()
  catch err
    return false
  return

module.exports = (grunt) ->
  # Flags to keep track of downloads
  downloaded =
    darwin64: false
    linux32: false
    linux64: false
    win32: false

  # Download the WebChimera binary for a platform
  [
    ['osx', 'x64', 'osx', './wcjs']
    ['linux', 'x64', 'linux', './wcjs']
    ['win', 'ia32', 'win', './wcjs']
  ].forEach (release) ->
    [platform, arch, dist, outputDir] = release

    grunt.registerTask 'wcjs:webchimera:' + dist, 'webchimera WebChimera.js',  ->
      @requiresConfig "wcjs.version", "wcjs.platform.runtime", 'wcjs.platform.version' 
      
      done = @async()

      { runtime, version } = grunt.config('wcjs').platform
      runtimeVersion = version

      { version } = grunt.config 'wcjs'
      
      outputDir = path.join outputDir, dist
      cacheDir = path.join os.tmpdir(), 'grunt-wcjs', 'webchimera'

      distVersion = "v#{version}"
      versionCacheDir = path.join(cacheDir, distVersion, runtime, dist)

      # Do nothing if the desired version of WebChimera.js is already installed.
      if fileExistsSync(path.join(outputDir + '/WebChimera.js.node')) and dirExistsSync(versionCacheDir)
        grunt.log.error 'hrt'
        return done()

      # Install a cached download of WebChimera.js if one is available.
      if dirExistsSync(versionCacheDir)
        grunt.log.writeln("Installing cached WebChimera.js #{distVersion}.")
        fs.ensureDirSync outputDir
        copyFile path.join(versionCacheDir, 'WebChimera.js.node'), path.join(outputDir, 'WebChimera.js.node'), done


      fs.ensureDirSync outputDir
      
      # Request the assets.
      github = new GitHub repo: 'RSATom/WebChimera.js'
      
      github.getReleases tag_name: distVersion, (error, releases) ->
        unless releases?.length > 0
          grunt.log.error "Cannot find WebChimera.js #{distVersion} from GitHub", error
          return done false

        projectName = 'WebChimera.js'

        # Which file to download
        filename = "#{projectName}_#{runtime}_#{runtimeVersion}_#{arch}_#{platform}.zip"

        # Find the asset of current platform.
        for asset in releases[0].assets when asset.name is filename
          github.downloadAsset asset, (error, inputStream) ->
            if error?
              grunt.log.error "Cannot download WebChimera.js #{distVersion}", error
              return done false

            # Save file to cache.
            grunt.verbose.writeln "Downloading WebChimera.js #{distVersion}."
            
            downloadAndUnzip inputStream, path.join(versionCacheDir, filename), (error) ->
              if error?
                grunt.log.error "Failed to download WebChimera.js #{distVersion}", error
                return done false

              grunt.verbose.writeln "Installing WebChimera.js #{distVersion}."
              grunt.verbose.writeln versionCacheDir + '/WebChimera.js.node'
              grunt.verbose.writeln outputDir  + '/WebChimera.js.node'
              copyFile path.join(versionCacheDir, 'WebChimera.js.node'), path.join(outputDir, 'WebChimera.js.node'), done
          return

        grunt.log.error "Cannot find #{filename} in electron #{distVersion} release"
        done false

  # Download the WebChimera binaries for all platforms
  grunt.registerTask 'wcjs:webchimera', [
    'wcjs:webchimera:osx'
    'wcjs:webchimera:linux'
    'wcjs:webchimera:win'
  ]
